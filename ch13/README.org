#+title: 类继承
#+created: [2022-03-21 Mon 21:42]
#+author: Min-Ye Zhang

* 代码片段
从基类继承得到派生类
#+begin_src cpp :eval never
// base class, with a double member
class BaseClass
{
    private:
        double d;
    public:
        BaseClass(double);
        virtual void View();
        virtual ~BaseClass();
    protected:
        void set(double); // visible to derived classes
};
BaseClass::BaseClass(double dbc)
{
    d = dbc;
}

class DerivedClass: public BaseClass
{
    private:
        int i;
        // also have d, but DC cannot directly access
    public:
        DerivedClass(int, double); // own constructor
        virtual void View();
};

DerivedClass::DerivedClass(int idc, double dbc): BaseClass(dbc)
{
    i = idc;
}
#+end_src

利用虚方法进行多态继承。在派生类方法中调用基类方法。访问在派生类中被重
新定义的基类方法时，须加上作用域解析符。
#+begin_src cpp :eval never
void BaseClass::View() { std::cout << d; }
void DerivedClass::View()
{
    BaseClass::View();
    std::cout << " " << i;
}
// instead one can overload operator<< to do the same thing.
#+end_src

纯虚函数 (pure virtual function): 声明为 ~virtual ... = 0~. 但可以在实
现文件中为其定义。
#+begin_src cpp :eval never
// declaration
public:
    virtual double area() const = 0;
#+end_src

* 概念
- C++ 三类继承模式 :: 公有继承, 保护继承, 私有继承。
- 虚方法与虚函数 :: 声明中以关键字 ~virtual~ 修饰的方法与函数。
  根据指针和引用所指向对象的类型调用，而非指针和引用的类型。
- 联编 (binding) :: 函数名联编, 将源代码中的函数调用解释为执行特定的函
  数代码块。
- 静态联编 (static binding) :: 在编译阶段进行联编。
  也称早期联编 (early binding)。静态联编效率更高。
- 动态联编 (dynamic binding) :: 产生特定代码，使得在运行时能够选择正确
  的虚方法。又称晚期联编 (late binding)
- 向上强制转换 (upcasting) :: 将 *派生类* 引用或指针转换为 *基类* 引用
  或指针。向上强制转换允许公有继承不需要显式类型转换。
- 向下强制转换 (downcasting) :: 将 *基类* 引用或指针转换为 *派生类* 引
  用或指针。在无显式类型转换下，这一转换是禁止的。
- 抽象基类 (abstract base class, ABC) :: 至少包含一个纯虚函数的类接口。

* Notes
- 派生类不能直接访问基类的私有成员，必须通过基类公有方法。
  故派生类的构造函数必须调用基类的构造函数。
- 创建派生对象时，会先调用基类构造函数，再调用派生类构造函数。
  派生对象过期时，会先调用派生类析构函数，再调基类析构函数。
- 基类指针可以指向派生类，基类引用可以引用派生对象，都不用作显式类型转
  换。反之不行。
- 公有继承建立 "is-a" 关系，即派生类对象也是一个基类对象。
  其余关系不适合采用该继承方案，比如可用类成员方式实现 "has-a".
- 如要在派生类中重新定义基类方法，应在基类中将其声明为虚方法。
  为基类声明虚析构函数是一个惯例。另一方面，仅将需要重定义的方法声明为
  虚方法，否则为非虚方法，以利用静态联编的高效。
- 应为基类提供虚析构函数。只有成员才能是虚函数。
- 重定义继承方法的两个原则
  1. 保持方法特征标不变，允许返回类型协变 (covariance of return type):
     返回类型从基类指针/引用改为派生类指针/引用。
  2. 若该基类方法有重载，则派生类中需要重新定义所有版本。
- 对数据成员尽量使用私有访问控制，而非保护访问控制 (~protected~): 通过
  公有方法修改该成员，则将使其本质上成为公有变量。可对成员函数使用保护
  访问控制。
- 派生类和基类 *同时* 含有指针数据成员时的内存管理
  - 析构函数：会自动调用基类析构函数，派生类析构函数只负责 delete 自身
    数据成员。
  - 复制构造函数：在成员初始化列表中调用基类复制构造函数
    #+begin_src cpp :eval never
    DerivedClass::DerivedClass(const DerivedClass & dc): BaseClass(dc)
    {
        // allocate memory to private pointer members, e.g. a string
        str = new char [strlen(dc.str)+1];
        strcpy(str, dc.str);
    }
    #+end_src
  - 赋值运算符：需要显式调用
    #+begin_src cpp :eval never
    DerivedClass & DerivedClass::operator=(const DerivedClass & dc)
    {
        if(this==&dc) return *this;
        BaseClass::operator=(dc);
        delete [] str;
        return *this;
    }
    #+end_src
- 在派生类中使用基类友元：强制类型转换
  #+begin_src cpp :eval never
  ostream & operator<<(ostream & os, const DerivedClass & dc)
  {
      os << (const BaseClass &) dc;
      os << "String: " << str;
      return os;
  }
  #+end_src
- 成员函数属性汇总 (tab 13.1, ~op=~ 指 ~+=~, ~-=~ 等赋值运算符)
  | 函数       | 能否继承 | 成员/友元 | 默认生成 | 虚函数 | 有返回类型 |
  |------------+----------+-----------+----------+--------+------------|
  | 构造函数   | X        | 成员      | ✔        | X      | X          |
  | 析构函数   | X        | 成员      | ✔        | ✔      | X          |
  | ~=~        | X        | 成员      | ✔        | ✔      | ✔          |
  | ~&~        | ✔        | 任意      | ✔        | ✔      | ✔          |
  | 转换函数   | ✔        | 成员      | X        | ✔      | X          |
  | ~()~       | ✔        | 成员      | X        | ✔      | ✔          |
  | ~[]~       | ✔        | 成员      | X        | ✔      | ✔          |
  | ~->~       | ✔        | 成员      | X        | ✔      | ✔          |
  | ~op=~      | ✔        | 任意      | X        | ✔      | ✔          |
  | 其他运算符 | ✔        | 任意      | X        | ✔      | ✔          |
  | new        | ✔        | 静态成员  | X        | X      | ~void*~    |
  | delete     | ✔        | 静态成员  | X        | X      | ~void~     |
  | 其他成员   | ✔        | 成员      | X        | ✔      | ✔          |
  | 友元       | X        | 友元      | X        | X      | ✔          |
- *不要* 在派生类析构函数中 *手动* 调用基类的析构函数，这会导致 double
  free 错误 (见 [[file:cd2.cpp]])

* 练习
[[file:ex01.cpp][Ex01]]
[[file:images/ex01.png]]

[[file:ex02.cpp][Ex02]]: 和 Ex01 相同
[[file:images/ex02.png]]
